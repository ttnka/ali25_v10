@inherits FolioDetalleBase
@rendermode InteractiveServer

<PageTitle>Detalle de Folio</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h3>Detalle de Folio</h3>
                <div>
                    <RadzenButton Click="@(() => NavigationManager.NavigateTo("/clientes/folios"))"
                                Icon="arrow_back"
                                ButtonStyle="ButtonStyle.Secondary"
                                class="me-2">
                        Regresar
                    </RadzenButton>
                    <RadzenButton Click="@InsertRow"
                                Icon="add"
                                ButtonStyle="ButtonStyle.Success"
                                class="me-2"
                                Disabled="@isLoading">
                        Nuevo Detalle
                    </RadzenButton>
                    <RadzenButton Click="@RefreshData"
                                Icon="refresh"
                                ButtonStyle="ButtonStyle.Light"
                                Disabled="@(isLoading || isRefreshing)">
                        @(isRefreshing ? "Actualizando..." : "Refrescar")
                    </RadzenButton>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
        </div>
    }

    @if (folio != null)
    {
        <div class="row mb-3">
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Folio</h5>
                        <p class="card-text">@folio.Folio</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Fecha</h5>
                        <p class="card-text">@folio.FechaFolio.ToString("dd/MM/yyyy")</p>
                    </div>
                </div>
            </div>
            <div class="col-md-3">
                <div class="card">
                    <div class="card-body">
                        <h5 class="card-title">Estado</h5>
                        <span class="@(folio.Estado switch {
                            <= 0 => "badge bg-danger",
                            < 5 => "badge bg-warning",
                            _ => "badge bg-success"
                        })">
                            @(folio.Estado switch {
                                <= 0 => "Inactivo",
                                < 5 => "Pendiente",
                                _ => "Activo"
                            })
                        </span>
                    </div>
                </div>
            </div>
        </div>
    }

    <div class="row mb-3">
        <div class="col-12">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="bypassCache" id="bypassCache">
                <label class="form-check-label" for="bypassCache">
                    Forzar recarga de datos
                </label>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    }

    <RadzenDataGrid @ref="gridFolioDet"
                   Data="@detalles"
                   Count="@count"
                   TItem="W222_FolioDet"
                   AllowFiltering="true"
                   AllowColumnResize="true"
                   AllowAlternatingRows="false"
                   FilterMode="FilterMode.Advanced"
                   AllowSorting="true"
                   PageSize="10"
                   AllowPaging="true"
                   PagerHorizontalAlign="HorizontalAlign.Left"
                   ShowPagingSummary="true"
                   EditMode="@editMode"
                   LoadingIndicator="true"
                   IsLoading="@isLoading"
                   class="rz-shadow-3">
        <Columns>
            <RadzenDataGridColumn TItem="W222_FolioDet" Property="Campo" Title="Campo">
                <EditTemplate Context="detalle">
                    <RadzenTextBox @bind-Value="detalle.Campo" Style="width:100%" Name="Campo" />
                    <RadzenRequiredValidator Component="Campo" Text="El campo es requerido" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W222_FolioDet" Property="Valor" Title="Valor">
                <EditTemplate Context="detalle">
                    <RadzenTextArea @bind-Value="detalle.Valor" Style="width:100%" Name="Valor" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W222_FolioDet" Property="Estado" Title="Estado" Width="100px">
                <Template Context="detalle">
                    <span class="@(detalle.Estado switch {
                        <= 0 => "badge bg-danger",
                        < 5 => "badge bg-warning",
                        _ => "badge bg-success"
                    })">
                        @(detalle.Estado switch {
                            <= 0 => "Inactivo",
                            < 5 => "Pendiente",
                            _ => "Activo"
                        })
                    </span>
                </Template>
                <EditTemplate Context="detalle">
                    <RadzenDropDown @bind-Value="detalle.Estado" 
                                  Data="@estados"
                                  TextProperty="Value"
                                  ValueProperty="Key"
                                  Style="width:100%" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W222_FolioDet" Width="70px" Sortable="false" Filterable="false">
                <Template Context="detalle">
                    <RadzenButton Icon="edit" 
                                ButtonStyle="ButtonStyle.Light"
                                Variant="Variant.Flat"
                                Size="ButtonSize.Medium"
                                Click="@(() => EditRow(detalle))"
                                Disabled="@(isLoading || isEditing)" />
                </Template>
                <EditTemplate Context="detalle">
                    <RadzenButton Icon="check" 
                                ButtonStyle="ButtonStyle.Success"
                                Variant="Variant.Flat"
                                Size="ButtonSize.Small"
                                Click="@(() => SaveRow(detalle))" />
                    <RadzenButton Icon="close" 
                                ButtonStyle="ButtonStyle.Light"
                                Variant="Variant.Flat"
                                Size="ButtonSize.Small"
                                Click="@(() => CancelEdit(detalle))" />
                    
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    protected Dictionary<int, string> estados = new()
    {
        { 0, "Inactivo" },
        { 1, "Pendiente" },
        { 5, "Activo" }
    };

    protected void Reset(W222_FolioDet detalle)
    {
        detallesToInsert.Remove(detalle);
        detallesToUpdate.Remove(detalle);
    }

    protected void Reset()
    {
        detallesToInsert.Clear();
        detallesToUpdate.Clear();
    }

    protected async Task InsertRow()
    {
        if (gridFolioDet?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var detalle = new W222_FolioDet(
            FolioId,
            "",
            "",
            5,
            true
        );
        
        detallesToInsert.Add(detalle);
        await gridFolioDet.InsertRow(detalle);
    }

    protected async Task EditRow(W222_FolioDet detalle)
    {
        if (gridFolioDet?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }
        detallesToUpdate.Add(detalle);
        await gridFolioDet.EditRow(detalle);
        isEditing = true;
    }

    protected async Task SaveRow(W222_FolioDet detalle)
    {
        try
        {
            if (detallesToInsert.Contains(detalle))
            {
                var result = await RepoFolioDet.Insert(detalle, CurrentUser.OrgId, CurrentUser, _ctsOperations.Token);
                if (!result.Exito)
                {
                    throw new Exception(string.Join(", ", result.MsnError));
                }

                await RepoBitacora.AddBitacora(
                    userId: CurrentUser.Id,
                    desc: $"Se creó el detalle {detalle.Campo} del folio {detalle.FolioId}",
                    orgId: CurrentUser.OrgId,
                    cancellationToken: _ctsBitacora.Token
                );

                detallesToInsert.Remove(detalle);
            }
            else if (detallesToUpdate.Contains(detalle))
            {
                var result = await RepoFolioDet.Update(detalle, CurrentUser.OrgId, CurrentUser, _ctsOperations.Token);
                if (!result.Exito)
                {
                    throw new Exception(result.Texto);
                }

                await RepoBitacora.AddBitacora(
                    userId: CurrentUser.Id,
                    desc: $"Se actualizó el detalle {detalle.Campo} del folio {detalle.FolioId}",
                    orgId: CurrentUser.OrgId,
                    cancellationToken: _ctsBitacora.Token
                );

                detallesToUpdate.Remove(detalle);
            }

            await gridFolioDet.UpdateRow(detalle);
            await LoadData();
        }
        catch (Exception ex)
        {
            await LogError(ex, "SaveRow");
        }
        finally
        {
            isEditing = false;
        }
    }

    protected void CancelEdit(W222_FolioDet detalle)
    {
        Reset(detalle);
        gridFolioDet.CancelEditRow(detalle);
        isEditing = false;
    }

    
} 