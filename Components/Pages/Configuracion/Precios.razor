@page "/configuracion/precios"
@inherits PreciosBase
@rendermode InteractiveServer

<PageTitle>Precios</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <RadzenButton Click="@(() => { })"
                         Icon="arrow_back"
                         ButtonStyle="ButtonStyle.Light"
                         Text="Regresar" />
        </div>
    </div>

    <div class="row mb-3 bg-light p-3 rounded">
        <div class="col-md-2 d-flex align-items-end">
            <RadzenButton Click="@RefreshData" 
                         Icon="refresh" 
                         ButtonStyle="@(isRefreshing ? ButtonStyle.Light : ButtonStyle.Primary)"
                         Disabled="@isRefreshing"
                         Style="width: 100%">
                @(isRefreshing ? "Actualizando..." : "Refrescar")
            </RadzenButton>
        </div>
        <div class="col-md-2 d-flex align-items-end">
            <RadzenButton Click="@ToggleBypassCache"
                         Icon="cached"
                         ButtonStyle="@(bypassCache ? ButtonStyle.Secondary : ButtonStyle.Light)"
                         Style="width: 100%">
                @(bypassCache ? "Con Caché" : "Sin Caché")
            </RadzenButton>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    }
    else
    {
        <RadzenDataGrid @ref="gridPrecios"
                       Data="@precios"
                       Count="@count"
                       TItem="W282_Precios"
                       AllowFiltering="true"
                       AllowPaging="true"
                       PageSize="10"
                       AllowSorting="true"
                       AllowColumnResize="true"
                       FilterMode="FilterMode.Advanced"
                       PagerHorizontalAlign="HorizontalAlign.Left"
                       ShowPagingSummary="true"
                       EditMode="@editMode"
                       class="rz-shadow-3">
            <Columns>
                <RadzenDataGridColumn TItem="W282_Precios" Context="precio" 
                                    Filterable="false" 
                                    Sortable="false" 
                                    TextAlign="TextAlign.Center" 
                                    Width="70px">
                    <Template Context="precio">
                        @if (ListaEdit)
                        {
                            <RadzenButton Click="@(() => EditRow(precio))" 
                                        Icon="edit" 
                                        ButtonStyle="ButtonStyle.Light" 
                                        Variant="Variant.Flat" 
                                        Size="ButtonSize.Medium"
                                        Disabled="@(isLoading || isEditing)" />
                        }
                    </Template>
                    <EditTemplate Context="precio">
                        <RadzenButton Icon="check" 
                                    ButtonStyle="ButtonStyle.Success" 
                                    Variant="Variant.Flat" 
                                    Size="ButtonSize.Medium"
                                    Click="@(() => SaveRow(precio))" />
                        <RadzenButton Icon="close" 
                                    ButtonStyle="ButtonStyle.Light" 
                                    Variant="Variant.Flat" 
                                    Size="ButtonSize.Medium"
                                    Click="@(() => CancelEdit(precio))" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W282_Precios" Property="ListaPrecioId" Title="Lista">
                    <Template Context="precio">
                        @(listaPrecios?.FirstOrDefault(l => l.ListaPrecioId == precio.ListaPrecioId)?.Titulo ?? precio.ListaPrecioId)
                    </Template>
                    <EditTemplate Context="precio">
                        <RadzenDropDown @bind-Value="precio.ListaPrecioId"
                                       Data="@listaPrecios"
                                       TextProperty="Titulo"
                                       ValueProperty="ListaPrecioId"
                                       Style="width:100%"
                                       FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                       AllowFiltering="true"
                                       Placeholder="Seleccione una lista..." />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W282_Precios" Property="ProductoId" Title="Producto">
                    <Template Context="precio">
                        @(productos?.FirstOrDefault(p => p.ProductoId == precio.ProductoId)?.Titulo ?? precio.ProductoId)
                    </Template>
                    <EditTemplate Context="precio">
                        <RadzenDropDown @bind-Value="precio.ProductoId"
                                       Data="@productos"
                                       TextProperty="Titulo"
                                       ValueProperty="ProductoId"
                                       Style="width:100%"
                                       FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                       AllowFiltering="true"
                                       Placeholder="Seleccione un producto..." />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W282_Precios" Property="Precio" Title="Precio">
                    <Template Context="precio">
                        @precio.Precio.ToString("C2")
                    </Template>
                    <EditTemplate Context="precio">
                        <RadzenNumeric @bind-Value="precio.Precio" Format="c2" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W282_Precios" Property="Estado" Title="Estado">
                    <Template Context="precio">
                        @(precio.Estado == 5 ? "Activo" : "Inactivo")
                    </Template>
                    <EditTemplate Context="precio">
                        <RadzenNumeric @bind-Value="precio.Estado" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger mt-3">
        @errorMessage
    </div>
}

@code {
    protected void Reset(W282_Precios precio)
    {
        preciosToInsert.Remove(precio);
        preciosToUpdate.Remove(precio);
    }

    protected void Reset()
    {
        preciosToInsert.Clear();
        preciosToUpdate.Clear();
    }

    protected async Task EditRow(W282_Precios precio)
    {
        if (gridPrecios?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }
        preciosToUpdate.Add(precio);
        await gridPrecios.EditRow(precio);
    }

    protected async Task SaveRow(W282_Precios precio)
    {
        await gridPrecios.UpdateRow(precio);
    }

    protected void CancelEdit(W282_Precios precio)
    {
        Reset(precio);
        gridPrecios.CancelEditRow(precio);
    }

    protected async Task DeleteRow(W282_Precios precio)
    {
        try 
        {
            Reset(precio);
            if (precios?.Contains(precio) == true)
            {
                precio.Estado = 0;
                var result = await RepoPrecios.Update(
                    precio,
                    CurrentUser.OrgId,
                    CurrentUser
                );

                if (!result.Exito)
                {
                    throw new Exception(result.Texto);
                }

                await RepoBitacora.AddBitacora(
                    userId: CurrentUser.Id,
                    desc: $"Se eliminó el precio {precio.PrecioId}",
                    orgId: CurrentUser.OrgId
                );

                await gridPrecios.Reload();
            }
            else
            {
                gridPrecios.CancelEditRow(precio);
                await gridPrecios.Reload();
            }
        }
        catch (Exception ex)
        {
            await LogError(ex, "DeleteRow");
        }
    }

    protected async Task InsertRow()
    {
        if (gridPrecios?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }

        var defaultListaId = listaPrecios?.FirstOrDefault()?.ListaPrecioId ?? "";
        var defaultProductoId = productos?.FirstOrDefault()?.ProductoId ?? "";

        var precio = new W282_Precios(
            listaPrecioId: defaultListaId,
            productoId: defaultProductoId,
            precio: 0M,
            estado: 5
        );
        
        preciosToInsert.Add(precio);
        await gridPrecios.InsertRow(precio);
    }

    protected async Task OnCreateRow(W282_Precios precio)
    {
        try
        {
            var result = await RepoPrecios.Insert(
                precio,
                CurrentUser.OrgId,
                CurrentUser
            );

            if (!result.Exito)
            {
                throw new Exception(result.Texto);
            }

            await RepoBitacora.AddBitacora(
                userId: CurrentUser.Id,
                desc: $"Se creó el precio {precio.PrecioId}",
                orgId: CurrentUser.OrgId
            );

            preciosToInsert.Remove(precio);
        }
        catch (Exception ex)
        {
            await LogError(ex, "OnCreateRow");
        }
    }

    protected async Task OnUpdateRow(W282_Precios precio)
    {
        try
        {
            Reset(precio);
            
            var result = await RepoPrecios.Update(
                precio,
                CurrentUser.OrgId,
                CurrentUser
            );

            if (!result.Exito)
            {
                throw new Exception(result.Texto);
            }

            await RepoBitacora.AddBitacora(
                userId: CurrentUser.Id,
                desc: $"Se actualizó el precio {precio.PrecioId}",
                orgId: CurrentUser.OrgId
            );
        }
        catch (Exception ex)
        {
            await LogError(ex, "OnUpdateRow");
        }
    }
} 