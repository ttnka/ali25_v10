@page "/configuracion/listaprecios"
@inherits ListaPreciosBase
@rendermode InteractiveServer

<PageTitle>Lista de Precios</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center">
                <h3>Lista de Precios</h3>
                <div>
                    <RadzenButton Click="@(() => NavigationManager.NavigateTo("/"))"
                                Icon="arrow_back"
                                ButtonStyle="ButtonStyle.Secondary"
                                class="me-2">
                        Regresar
                    </RadzenButton>
                    <RadzenButton Click="@(() => gridListaPrecios.InsertRow(new W280_ListaPrecios(
                        esGlobal: false,
                        titulo: "Nueva Lista",
                        descripcion: "Nueva lista de precios",
                        orgId: CurrentUser.OrgId,
                        estado: 5,
                        status: true
                    )))"
                                Icon="add"
                                ButtonStyle="ButtonStyle.Success"
                                class="me-2"
                                Disabled="@isLoading">
                        Nueva Lista
                    </RadzenButton>
                    <RadzenButton Click="@RefreshData"
                                Icon="refresh"
                                ButtonStyle="@(isRefreshing ? ButtonStyle.Light : ButtonStyle.Primary)"
                                Disabled="@(isLoading || isRefreshing)">
                        @(isRefreshing ? "Actualizando..." : "Refrescar")
                    </RadzenButton>
                </div>
            </div>
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
        </div>
    }

    <div class="row mb-3">
        <div class="col-12">
            <div class="form-check">
                <input class="form-check-input" type="checkbox" @bind="bypassCache" id="bypassCache">
                <label class="form-check-label" for="bypassCache">
                    Forzar recarga de datos
                </label>
            </div>
        </div>
    </div>

    @if (isLoading)
    {
        <div class="text-center">
            <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
        </div>
    }
    else
    {
        <RadzenDataGrid @ref="gridListaPrecios"
                       Data="@listaPrecios"
                       Count="@count"
                       TItem="W280_ListaPrecios"
                       AllowFiltering="true"
                       AllowPaging="true"
                       PageSize="10"
                       AllowSorting="true"
                       AllowColumnResize="true"
                       FilterMode="FilterMode.Advanced"
                       PagerHorizontalAlign="HorizontalAlign.Left"
                       ShowPagingSummary="true"
                       EditMode="@editMode"
                       RowUpdate="@OnUpdateRow"
                       RowInsert="@OnInsertRow"
                       LoadingIndicator="true"
                       IsLoading="@isLoading"
                       class="rz-shadow-3">
            <Columns>
                <RadzenDataGridColumn TItem="W280_ListaPrecios" Property="Titulo" Title="Título">
                    <EditTemplate Context="lista">
                        <RadzenTextBox @bind-Value="lista.Titulo" Style="width:100%" Name="Titulo" />
                        <RadzenRequiredValidator Component="Titulo" Text="El título es requerido" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W280_ListaPrecios" Property="Descripcion" Title="Descripción">
                    <EditTemplate Context="lista">
                        <RadzenTextArea @bind-Value="lista.Descripcion" Style="width:100%" Name="Descripcion" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W280_ListaPrecios" Property="EsGlobal" Title="Global" Width="100px">
                    <Template Context="lista">
                        <RadzenSwitch @bind-Value="lista.EsGlobal" Disabled="true" />
                    </Template>
                    <EditTemplate Context="lista">
                        <RadzenSwitch @bind-Value="lista.EsGlobal" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W280_ListaPrecios" Property="Estado" Title="Estado" Width="100px">
                    <Template Context="lista">
                        @lista.Estado
                    </Template>
                    <EditTemplate Context="lista">
                        <RadzenNumeric @bind-Value="lista.Estado" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W280_ListaPrecios" Width="70px" Sortable="false" Filterable="false">
                    <Template Context="lista">
                        <RadzenButton Icon="edit" 
                                    ButtonStyle="ButtonStyle.Light"
                                    Variant="Variant.Flat"
                                    Size="ButtonSize.Medium"
                                    Click="@(() => EditRow(lista))"
                                    Disabled="@(isLoading || isEditing)" />
                    </Template>
                    <EditTemplate Context="lista">
                        <RadzenButton Icon="check" 
                                    ButtonStyle="ButtonStyle.Success"
                                    Variant="Variant.Flat"
                                    Size="ButtonSize.Small"
                                    Click="@(() => SaveRow(lista))" />
                        <RadzenButton Icon="close" 
                                    ButtonStyle="ButtonStyle.Light"
                                    Variant="Variant.Flat"
                                    Size="ButtonSize.Small"
                                    Click="@(() => CancelEdit(lista))" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>
    }
</div>

@code {
    protected void Reset(W280_ListaPrecios lista)
    {
        listaPreciosToInsert.Remove(lista);
        listaPreciosToUpdate.Remove(lista);
    }

    protected void Reset()
    {
        listaPreciosToInsert.Clear();
        listaPreciosToUpdate.Clear();
    }

    protected async Task EditRow(W280_ListaPrecios lista)
    {
        if (gridListaPrecios?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }
        listaPreciosToUpdate.Add(lista);
        await gridListaPrecios.EditRow(lista);
    }

    protected async Task SaveRow(W280_ListaPrecios lista)
    {
        await gridListaPrecios.UpdateRow(lista);
    }

    protected void CancelEdit(W280_ListaPrecios lista)
    {
        Reset(lista);
        gridListaPrecios.CancelEditRow(lista);
    }

    protected async Task RefreshData()
    {
        if (isRefreshing) return;
        
        try 
        {   
            isRefreshing = true;
            await LoadData();
        }
        catch (Exception ex)
        {
            await LogError(ex, "RefreshData");
        }
        finally
        {
            isRefreshing = false;
            StateHasChanged();
        }
    }

    protected void ToggleBypassCache()
    {
        bypassCache = !bypassCache;
    }

    protected async Task OnUpdateRow(W280_ListaPrecios lista)
    {
        try
        {
            var result = await RepoListaPrecios.Update(
                lista,
                CurrentUser.OrgId,
                CurrentUser,
                cancellationToken: _ctsOperations.Token
            );

            if (!result.Exito)
            {
                throw new Exception(result.Texto);
            }

            await RepoBitacora.AddBitacora(
                userId: CurrentUser.Id,
                desc: $"Se actualizó la lista de precios {lista.Titulo}",
                orgId: CurrentUser.OrgId,
                cancellationToken: _ctsBitacora.Token
            );

            await LoadData();
            isEditing = false;
        }
        catch (Exception ex)
        {
            await LogError(ex, "OnUpdateRow");
            throw;
        }
    }

    protected async Task OnInsertRow(W280_ListaPrecios lista)
    {
        try
        {
            var result = await RepoListaPrecios.Insert(
                lista,
                CurrentUser.OrgId,
                CurrentUser,
                cancellationToken: _ctsOperations.Token
            );

            if (!result.Exito)
            {
                throw new Exception(result.Texto);
            }

            await RepoBitacora.AddBitacora(
                userId: CurrentUser.Id,
                desc: $"Se creó la lista de precios {lista.Titulo}",
                orgId: CurrentUser.OrgId,
                cancellationToken: _ctsBitacora.Token
            );

            await LoadData();
        }
        catch (Exception ex)
        {
            await LogError(ex, "OnInsertRow");
            throw;
        }
    }
}