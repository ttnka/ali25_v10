@page "/Admin/Clientes"
@inherits ClientesListBase
@rendermode InteractiveServer

<PageTitle>Mis Clientes</PageTitle>

<div class="container-fluid">
    <div class="row mb-3 bg-light p-3 rounded">
        <div class="col-md-6">
            <h3>Mis Clientes</h3>
        </div>
        <div class="col-md-6 text-end">
            <RadzenButton Click="@RefreshData"
                         Icon="refresh"
                         ButtonStyle="@(isRefreshing ? ButtonStyle.Light : ButtonStyle.Primary)"
                         Disabled="@isRefreshing"
                         class="me-2">
                @(isRefreshing ? "Actualizando..." : "Refrescar")
            </RadzenButton>
            @if (CurrentUser.Nivel >= 5)
            {
                <RadzenButton Click="@ToggleBypassCache"
                            Text="@(bypassCache ? "Lectura" : "Forzar Lectura")"  
                            ButtonStyle="ButtonStyle.Light"
                            class="me-2"
                            disabled="@isRefreshing">
                </RadzenButton>
            }
        </div>
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (isLoading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }
    else
    {
        <RadzenDataGrid @ref="gridClientes"
                       Data="@clientes"
                       Count="@count"
                       AllowFiltering="true"
                       AllowColumnResize="true"
                       AllowAlternatingRows="false"
                       FilterMode="FilterMode.Advanced"
                       AllowSorting="true"
                       PageSize="10"
                       AllowPaging="true"
                       EditMode="DataGridEditMode.Single"
                       PagerHorizontalAlign="HorizontalAlign.Left"
                       ShowPagingSummary="true"
                       class="rz-shadow-3">
            <Columns>
                <RadzenDataGridColumn TItem="W210_Clientes" Property="ClienteOrgId" Title="Cliente" Width="200px">
                    <Template Context="data">
                        @(orgsDisponibles.FirstOrDefault(o => o.OrgId == data.ClienteOrgId)?.Comercial ?? "")
                    </Template>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W210_Clientes" Property="Estado" Title="Estado" Width="100px">
                    <Template Context="data">
                        <span class="@(data.Estado switch {
                            <= 0 => "badge bg-danger",
                            < 5 => "badge bg-warning",
                            _ => "badge bg-success"
                        })">
                            @(data.Estado switch {
                                <= 0 => "Inactivo",
                                < 5 => "Pendiente",
                                _ => "Activo"
                            })
                        </span>
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenDropDown @bind-Value="data.Estado" 
                                      Data="@estados"
                                      TextProperty="Value"
                                      ValueProperty="Key"
                                      Style="width:100%" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W210_Clientes" Property="Status" Title="Activo" Width="100px">
                    <Template Context="data">
                        <RadzenSwitch @bind-Value="@data.Status" Disabled="true" />
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenSwitch @bind-Value="@data.Status" />
                    </EditTemplate>
                </RadzenDataGridColumn>

                <RadzenDataGridColumn TItem="W210_Clientes" Context="data" 
                                    Filterable="false" 
                                    Sortable="false" 
                                    TextAlign="TextAlign.Center" 
                                    Width="100px">
                    <Template Context="data">
                        <RadzenButton Click="@(() => EditRow(data))" 
                                    Icon="edit" 
                                    ButtonStyle="ButtonStyle.Light" 
                                    Variant="Variant.Flat" 
                                    Size="ButtonSize.Medium"
                                    Disabled="@isEditing" />
                    </Template>
                    <EditTemplate Context="data">
                        <RadzenButton Icon="check" 
                                    ButtonStyle="ButtonStyle.Success" 
                                    Variant="Variant.Flat" 
                                    Size="ButtonSize.Medium"
                                    Click="@(() => SaveRow(data))" />
                        <RadzenButton Icon="close" 
                                    ButtonStyle="ButtonStyle.Light" 
                                    Variant="Variant.Flat" 
                                    Size="ButtonSize.Medium"
                                    Click="@(() => CancelEdit(data))" />
                        <RadzenButton Icon="delete" 
                                    ButtonStyle="ButtonStyle.Danger" 
                                    Variant="Variant.Flat" 
                                    Size="ButtonSize.Medium"
                                    Click="@(() => DeleteRow(data))" />
                    </EditTemplate>
                </RadzenDataGridColumn>
            </Columns>
        </RadzenDataGrid>

        <div class="row mt-4">
            <div class="col-md-6">
                <h4>Agregar Cliente</h4>
                <RadzenDropDown TValue="string"
                               Data="@orgsDisponibles.Where(o => !clientes?.Any(c => c.ClienteOrgId == o.OrgId) ?? true)"
                               TextProperty="Comercial"
                               ValueProperty="OrgId"
                               Change=@(args => AddCliente(orgsDisponibles.First(o => o.OrgId == args.ToString())))
                               Placeholder="Seleccione una organizaciÃ³n..."
                               Style="width: 100%" />
            </div>
        </div>
    }
</div>

@code {
    protected Dictionary<int, string> estados = new()
    {
        { 0, "Inactivo" },
        { 1, "Pendiente" },
        { 5, "Activo" }
    };

    protected void Reset(W210_Clientes cliente)
    {
        clientesToInsert.Remove(cliente);
        clientesToUpdate.Remove(cliente);
    }

    protected void Reset()
    {
        clientesToInsert.Clear();
        clientesToUpdate.Clear();
    }

    protected async Task EditRow(W210_Clientes cliente)
    {
        if (gridClientes?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }
        clientesToUpdate.Add(cliente);
        await gridClientes.EditRow(cliente);
    }

    protected async Task SaveRow(W210_Clientes cliente)
    {
        await gridClientes.UpdateRow(cliente);
    }

    protected void CancelEdit(W210_Clientes cliente)
    {
        Reset(cliente);
        gridClientes.CancelEditRow(cliente);
    }

    protected async Task DeleteRow(W210_Clientes cliente)
    {
        try 
        {
            Reset(cliente);
            if (clientes?.Contains(cliente) == true)
            {
                cliente.Status = false;
                var result = await RepoClientes.Update(cliente, CurrentUser.OrgId, elUser: CurrentUser, cancellationToken: _ctsOperations.Token);
                if (!result.Exito)
                {
                    throw new Exception(result.Texto);
                }
                await gridClientes.Reload();
            }
            else
            {
                gridClientes.CancelEditRow(cliente);
                await gridClientes.Reload();
            }
        }
        catch (Exception ex)
        {
            await LogError(ex, "DeleteRow");
        }
    }
} 