# Propuesta de Implementación de Caché

## CacheService<T>

```csharp
public class CacheService<T> where T : class
{
    private readonly IMemoryCache _cache;
    private readonly SemaphoreSlim _lock = new(1, 1);
    private readonly MemoryCacheEntryOptions _cacheOptions;
    
    public CacheService(IMemoryCache cache, IConfiguration config)
    {
        _cache = cache;
        
        // Configuración con valores por defecto
        var cacheMinutes = config.GetValue("Cache:MinutesToLive", 30);
        var slidingMinutes = config.GetValue("Cache:SlidingMinutes", 10);
        var sizeLimit = config.GetValue("Cache:SizeLimit", 1024); // 1MB

        _cacheOptions = new MemoryCacheEntryOptions()
            .SetAbsoluteExpiration(TimeSpan.FromMinutes(cacheMinutes))
            .SetSlidingExpiration(TimeSpan.FromMinutes(slidingMinutes))
            .SetSize(1) // Para control de memoria
            .SetPriority(CacheItemPriority.Normal);
    }

    public string GetCacheKey(string orgId, IDictionary<string, object> parameters)
    {
        var orderedParams = parameters
            .OrderBy(x => x.Key)
            .Select(x => $"{x.Key}={x.Value}")
            .ToList();

        return $"{typeof(T).Name}_{orgId}_{string.Join("_", orderedParams)}";
    }

    public async Task<(bool found, List<T>? value)> TryGetValueAsync(string key)
    {
        await _lock.WaitAsync();
        try
        {
            if (_cache.TryGetValue(key, out object? cached))
            {
                return (true, (List<T>)cached);
            }
            return (false, null);
        }
        finally
        {
            _lock.Release();
        }
    }

    public async Task SetValueAsync(string key, List<T> value)
    {
        await _lock.WaitAsync();
        try
        {
            _cache.Set(key, value, _cacheOptions);
        }
        finally
        {
            _lock.Release();
        }
    }

    public async Task InvalidateAsync(string orgId)
    {
        await _lock.WaitAsync();
        try
        {
            var pattern = $"{typeof(T).Name}_{orgId}";
            // Usar reflection para obtener las claves del cache que coincidan
            var cacheKeys = GetCacheKeys().Where(k => k.StartsWith(pattern));
            foreach (var key in cacheKeys)
            {
                _cache.Remove(key);
            }
        }
        finally
        {
            _lock.Release();
        }
    }

    private IEnumerable<string> GetCacheKeys()
    {
        // Obtener las claves mediante reflection (necesario para IMemoryCache)
        var field = typeof(MemoryCache).GetField("_entries", 
            BindingFlags.NonPublic | BindingFlags.Instance);
        var entries = field?.GetValue(_cache) as IDictionary;
        return entries?.Keys.Cast<string>() ?? Enumerable.Empty<string>();
    }
}
```

## Uso en Repo<T>

```csharp
public class Repo<T> where T : class
{
    private readonly CacheService<T> _cache;
    private readonly DbContext _context;

    public async Task<ApiRespAll<T>> Get(string orgId, Expression<Func<T, bool>> filtro)
    {
        var parameters = new Dictionary<string, object>
        {
            ["filtro"] = filtro.ToString()
        };
        
        var key = _cache.GetCacheKey(orgId, parameters);
        var (found, cached) = await _cache.TryGetValueAsync(key);
        
        if (found && cached != null)
        {
            return new ApiRespAll<T> { Exito = true, DataVarios = cached };
        }

        var result = await _context.Set<T>()
            .Where(filtro)
            .ToListAsync();

        await _cache.SetValueAsync(key, result);
        return new ApiRespAll<T> { Exito = true, DataVarios = result };
    }

    public async Task<ApiRespAll<T>> Update(T entity, string orgId)
    {
        // Actualizar en DB
        _context.Update(entity);
        await _context.SaveChangesAsync();
        
        // Invalidar caché
        await _cache.InvalidateAsync(orgId);
        
        return new ApiRespAll<T> { Exito = true };
    }
}
```

## Ventajas
1. Thread-safe
2. Configurable
3. Gestión de memoria
4. Fácil mantenimiento

## Pendiente para mañana
1. Implementar CacheService
2. Modificar Repo actual
3. Probar con OrgBase primero
4. Extender a otros repositorios 

Thread-safe con SemaphoreSlim
Configuración externalizada
Control de memoria con SetSize
Expiración dual (absoluta y sliding)
Invalidación por organización