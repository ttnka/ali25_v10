@page "/Admin/Org"
@inherits OrgBase
@rendermode InteractiveServer

<PageTitle>Organizaciones</PageTitle> 

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <RadzenButton Click="RefreshData" 
                         Text=@(isRefreshing ? "Actualizando..." : "Actualizar")
                         ButtonStyle=@(isRefreshing ? ButtonStyle.Warning : ButtonStyle.Primary)
                         Disabled=@isRefreshing />

            @if (CurrentUser?.Nivel >= 5)
            {
                <RadzenButton Click="ToggleBypassCache"
                             Text=@(bypassCache ? "Forzar Lectura" : "Lectura")
                             ButtonStyle=@(bypassCache ? ButtonStyle.Warning : ButtonStyle.Info)
                             class="mx-2" />
            }
        </div>
    </div>

    @if (CurrentUser?.Nivel >= 5)
    {
        <div class="row mb-3">
            <div class="col">
                <RadzenAccordion>
                    <Items>
                        <RadzenAccordionItem Text="Agregar Organización" Icon="add">
                            <OrgAdd OnOrgCreated="@HandleOrgCreated" />
                        </RadzenAccordionItem>
                    </Items>
                </RadzenAccordion>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>
    }

    @if (isLoading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }

    <RadzenDataGrid @ref="gridOrg"
                   TItem="W100_Org"
                   Data="@orgs"
                   Count="@count"
                   AllowFiltering="true"
                   AllowColumnResize="true"
                   AllowAlternatingRows="false"
                   FilterMode="FilterMode.Advanced"
                   AllowSorting="true"
                   PageSize="10"
                   AllowPaging="true"
                   EditMode="DataGridEditMode.Single"
                   RowUpdate="@OnUpdateRow"
                   PagerHorizontalAlign="HorizontalAlign.Left"
                   ShowPagingSummary="true"
                   class="rz-shadow-3">
        <Columns>
            <RadzenDataGridColumn TItem="W100_Org" Context="org" Width="70px">
                <Template>
                    @if (CurrentUser?.Nivel >= 5)
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(org))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    }
                </Template>
                <EditTemplate>
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@(args => SaveRow(org))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => CancelEdit(org))">
                    </RadzenButton>
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Class="m-1" Click="@(args => DeleteRow(org))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W100_Org" Property="Rfc" Title="RFC" Width="120px">
                <Template Context="org">
                    @org.Rfc
                </Template>
                <EditTemplate Context="org">
                    <RadzenTextBox @bind-Value="org.Rfc" Style="width: 100%;" Name="Rfc" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W100_Org" Property="Comercial" Title="Comercial" Width="200px">
                <Template Context="org">
                    @org.Comercial
                </Template>
                <EditTemplate Context="org">
                    <RadzenTextBox @bind-Value="org.Comercial" Style="width: 100%;" Name="Comercial" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W100_Org" Property="RazonSocial" Title="Razón Social" Width="300px">
                <Template Context="org">
                    @org.RazonSocial
                </Template>
                <EditTemplate Context="org">
                    <RadzenTextBox @bind-Value="org.RazonSocial" Style="width: 100%;" Name="RazonSocial" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W100_Org" Property="Tipo" Title="Tipo" Width="120px">
                <Template Context="org">
                    @org.Tipo
                </Template>
                <EditTemplate Context="org">
                    <RadzenDropDown @bind-Value="org.Tipo" Data="@tiposOrg" Style="width: 100%;" />
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="W100_Org" Property="Status" Title="Estado" Width="100px">
                <Template Context="org">
                    <RadzenBadge BadgeStyle="@(org.Status ? BadgeStyle.Success : BadgeStyle.Danger)"
                                Text="@(org.Status ? "Activo" : "Inactivo")" />
                </Template>
                <EditTemplate Context="org">
                    <RadzenSwitch @bind-Value="org.Status" />
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code {
    protected async Task HandleOrgCreated()
    {
        await LoadData();
    }

    protected void Reset()
    {
        orgsToUpdate.Clear();
    }
    protected void Reset(W100_Org org)
    {
        orgsToUpdate.Remove(org);
    }

    protected async Task EditRow(W100_Org org)
    {
        if (gridOrg?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }

        orgsToUpdate.Add(org);
        if (gridOrg != null)
        {
            await gridOrg.EditRow(org);
        }
    }

    protected async Task SaveRow(W100_Org org)
    {
        if (gridOrg != null)
        {
            await gridOrg.UpdateRow(org);
        }
    }

    protected void CancelEdit(W100_Org org)
    {
        Reset(org);
        if (gridOrg != null)
        {
            gridOrg.CancelEditRow(org);
        }
    }

    protected async Task DeleteRow(W100_Org org)
    {
        try 
        {
            Reset(org);

            if (orgs?.Contains(org) == true)
            {
                org.Status = false;
                var result = await RepoOrg.Update(org, CurrentUser.OrgId, elUser: CurrentUser);
                if (!result.Exito)
                {
                    throw new Exception(result.Texto);
                }
                
                await RepoBitacora.AddBitacora(
                    userId: CurrentUser.Id,
                    desc: $"Se eliminó la organización {org.Comercial}",
                    orgId: CurrentUser.OrgId
                );

                if (gridOrg != null)
                {
                    await gridOrg.Reload();
                }
            }
            else
            {
                if (gridOrg != null)
                {
                    gridOrg.CancelEditRow(org);
                    await gridOrg.Reload();
                }
            }
        }
        catch (Exception ex)
        {
            await RepoBitacora.AddLog(
                userId: CurrentUser.Id,
                orgId: CurrentUser.OrgId,
                desc: $"Error al eliminar organización: {ex.Message}",
                tipoLog: "Error",
                origen: "OrgBase.DeleteRow"
            );
        }
    }
    protected async Task OnUpdateRow(W100_Org org)
    {
        try
        {
            Reset(org);
            
            // Verificar RFC duplicado (excluyendo el RFC actual)
            var rfcToCheck = org.Rfc.ToUpper();
            var originalOrg = orgs?.FirstOrDefault(o => o.OrgId == org.OrgId);
            if (originalOrg != null && 
                rfcToCheck != originalOrg.Rfc.ToUpper() && 
                existingRfcs.Contains(rfcToCheck))
            {
                throw new Exception($"El RFC {org.Rfc} ya existe en otra organización");
            }

            var result = await RepoOrg.Update(
                org, 
                CurrentUser.OrgId,
                elUser: CurrentUser,
                cancellationToken: _ctsOperations.Token
            );
            if (!result.Exito)
            {
                throw new Exception(result.Texto);
            }

            // Actualizar el conjunto de RFCs
            if (originalOrg != null)
            {
                existingRfcs.Remove(originalOrg.Rfc.ToUpper());
            }
            existingRfcs.Add(rfcToCheck);

            await RepoBitacora.AddBitacora(
                userId: CurrentUser.Id,
                desc: $"Se actualizó la organización {org.Comercial}",
                orgId: CurrentUser.OrgId
            );

            await LoadData(); // Recargar datos
        }
        catch (Exception ex)
        {
            await RepoBitacora.AddLog(
                userId: CurrentUser.Id,
                orgId: CurrentUser.OrgId,
                desc: $"Error al actualizar organización: {ex.Message}",
                tipoLog: "Error",
                origen: "OrgBase.OnUpdateRow"
            );
            // Revertir cambios en UI
            if (gridOrg != null)
            {
                await gridOrg.Reload();
            }
            throw; // Re-lanzar para mostrar error en UI
        }
    }
} 