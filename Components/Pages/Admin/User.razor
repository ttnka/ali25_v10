@using Microsoft.AspNetCore.Components.Web
@using Radzen.Blazor
@using Radzen
@inherits UserBase

@rendermode InteractiveServer

<PageTitle>Usuarios</PageTitle>

<div class="container-fluid">
    <div class="row mb-3">
        <div class="col">
            <RadzenButton Click="RefreshData" 
                         Text=@(isRefreshing ? "Actualizando..." : "Actualizar")
                         ButtonStyle=@(isRefreshing ? ButtonStyle.Warning : ButtonStyle.Primary)
                         Disabled=@isRefreshing />

            @if (CurrentUser?.Nivel >= 5)
            {
                <RadzenButton Click="ToggleBypassCache"
                             Text=@(bypassCache ? "Forzar Lectura" : "Lectura")
                             ButtonStyle=@(bypassCache ? ButtonStyle.Warning : ButtonStyle.Info)
                             class="mx-2" />
            }
        </div>
    </div>

    <div class="row mb-3 bg-light p-3 rounded">
        <div class="col-md-4">
            <RadzenFormField Text="Tipo" Style="width: 100%;">
                <RadzenDropDown @bind-Value="@selectedTipo"
                               Data="@tiposOrgs"
                               Style="width: 100%"
                               Placeholder="Seleccione un tipo..."
                               Change="@(async(args) => await OnFiltroSelected(args))" />
            </RadzenFormField>
        </div>
        <div class="col-md-8">
            <RadzenFormField Text="Organizaci칩n" Style="width: 100%;">
                <RadzenDropDown @bind-Value="@LaOrgId"
                               Data="@orgsFiltradas"
                               TextProperty="Comercial"
                               ValueProperty="OrgId"
                               Change="@(async(args) => await OnOrgSelected(args))"
                               Style="width: 100%"
                               Placeholder="Seleccione una organizaci칩n..." />
            </RadzenFormField>
        </div>
    </div>

    @if (CurrentUser?.Nivel >= 5)
    {
        <div class="row mb-3">
            <div class="col">
                <RadzenAccordion>
                    <Items>
                        <RadzenAccordionItem Text="Agregar Usuario" Icon="add">
                            <UserAdd OnUserCreated="@HandleUserCreated" Orgs="@orgsPrivadas" />
                        </RadzenAccordionItem>
                    </Items>
                </RadzenAccordion>
            </div>
        </div>
    }

    @if (isLoading)
    {
        <RadzenProgressBar Value="100" ShowValue="false" Mode="ProgressBarMode.Indeterminate" />
    }

    <RadzenDataGrid @ref="gridUser" 
                   Data="@users" 
                   Count="@count"
                   EditMode="@editMode"
                   ExpandMode="DataGridExpandMode.Single"
                   AllowFiltering="true"
                   AllowColumnResize="true"
                   AllowAlternatingRows="false"
                   FilterMode="FilterMode.Advanced"
                   AllowSorting="true" 
                   PageSize="10" 
                   AllowPaging="true"
                   PagerHorizontalAlign="HorizontalAlign.Left"
                   ShowPagingSummary="true"
                   class="rz-shadow-3">
        <Columns>
            <RadzenDataGridColumn TItem="ApplicationUser" Context="user" Width="70px">
                <Template>
                    @if (ListaEdit)
                    {
                        <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => EditRow(user))" @onclick:stopPropagation="true">
                        </RadzenButton>
                    }
                </Template>
                <EditTemplate>
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Primary" Class="m-1" Click="@(args => SaveRow(user))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Class="m-1" Click="@(args => CancelEdit(user))">
                    </RadzenButton>
                    <RadzenButton Icon="delete" ButtonStyle="ButtonStyle.Danger" Class="m-1" Click="@(args => DeleteRow(user))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ApplicationUser" Title="Nombre" Filterable="true" Width="200px">
                <Template Context="user">
                    <div style="white-space:pre-wrap">@($"{user.Nombre} {user.Paterno} {user.Materno}")</div>
                </Template>
                <EditTemplate Context="user">
                    <div class="mb-1">
                        <RadzenFormField Text="Nombre" Style="width: 100%;">
                            <RadzenTextBox Name="Nombre" @bind-Value="user.Nombre" Style="width: 90%" />
                            <RadzenRequiredValidator Component="Nombre" Text="El Nombre es Obligatorio." />
                        </RadzenFormField>
                    </div>

                    <div class="mb-1">
                        <RadzenFormField Text="Apellido Paterno" Style="width: 100%;">
                            <RadzenTextBox Name="Paterno" @bind-Value="user.Paterno" Style="width: 90%" />
                            <RadzenRequiredValidator Component="Paterno" Text="El Apellido Paterno es Obligatorio." />
                        </RadzenFormField>
                    </div>

                    <div>
                        <RadzenFormField Text="Apellido Materno" Style="width: 100%;">
                            <RadzenTextBox Name="Materno" @bind-Value="user.Materno" Style="width: 90%" />
                        </RadzenFormField>
                    </div>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ApplicationUser" Title="Email" Filterable="true" Width="200px">
                <Template Context="user">
                    @user.Email
                </Template>
                <EditTemplate Context="user">
                    <RadzenFormField Text="Email" Style="width: 100%;">
                        <RadzenTextBox Name="Email" @bind-Value="user.Email" Style="width: 90%" />
                        <RadzenRequiredValidator Component="Email" Text="El Email es Obligatorio." />
                        <RadzenEmailValidator Component="Email" Text="Formato de Email inv치lido." />
                    </RadzenFormField>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ApplicationUser" Title="Nivel" Filterable="true" Width="100px">
                <Template Context="user">
                    <RadzenBadge BadgeStyle="BadgeStyle.Info" Text="@niveles[user.Nivel]" />
                </Template>
                <EditTemplate Context="user">
                    <RadzenFormField Text="Nivel" Style="width: 100%;">
                        <RadzenDropDown Name="Nivel" 
                                       Data="@niveles" 
                                       @bind-Value="user.Nivel"
                                       TextProperty="Value" 
                                       ValueProperty="Key" 
                                       Style="width: 90%;" />
                    </RadzenFormField>
                </EditTemplate>
            </RadzenDataGridColumn>

            <RadzenDataGridColumn TItem="ApplicationUser" Title="Estado" Filterable="true" Width="100px">
                <Template Context="user">
                    <RadzenBadge BadgeStyle="@(user.EsActivo ? BadgeStyle.Success : BadgeStyle.Danger)"
                                Text="@(user.EsActivo ? "Activo" : "Inactivo")" />
                </Template>
                <EditTemplate Context="user">
                    <RadzenFormField Text="Estado" Style="width: 100%;">
                        <RadzenSwitch @bind-Value="user.EsActivo" />
                    </RadzenFormField>
                </EditTemplate>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
</div>

@code 
{
    // <UserAdd OnUserCreated="@HandleUserCreated" TipoOrg="@TipoOrg"  />
    

    protected void Reset(ApplicationUser user)
    {
        usersToInsert.Remove(user);
        usersToUpdate.Remove(user);
    }
    protected void Reset()
        {
            usersToInsert.Clear();
            usersToUpdate.Clear();
        }
    protected async Task EditRow(ApplicationUser user)
    {
        //if (!gridUser?.IsValid != true) return;

        if (gridUser?.EditMode == DataGridEditMode.Single)
        {
            Reset();
        }
        if (user.Nivel >= CurrentUser.Nivel) user.Nivel = CurrentUser.Nivel -1;
        usersToUpdate.Add(user);
        if (gridUser != null)
        {
            await gridUser.EditRow(user);
        }
    }

        protected async Task SaveRow(ApplicationUser user)
        {
            await gridUser.UpdateRow(user);
        }

        protected void CancelEdit(ApplicationUser user)
        {
            Reset(user);
            gridUser.CancelEditRow(user);
        }

        protected async Task DeleteRow(ApplicationUser user)
        {
            try 
            {
                Reset(user);

                if (users?.Contains(user) == true)
                {
                    user.Status = false;
                    var result = await RepoUser.Update(user, CurrentUser.OrgId, elUser: CurrentUser);
                    if (!result.Exito)
                    {
                        throw new Exception(result.Texto);
                    }

                    await RepoBitacora.AddBitacora(
                        userId: CurrentUser.Id,
                        desc: $"Se elimin칩 el usuario {user.Nombre} {user.Paterno}",
                        orgId: CurrentUser.OrgId
                    );

                    await gridUser.Reload();
                }
                else
                {
                    gridUser.CancelEditRow(user);
                    await gridUser.Reload();
                }
            }
            catch (Exception ex)
            {
                await RepoBitacora.AddLog(
                    userId: CurrentUser.Id,
                    orgId: CurrentUser.OrgId,
                    desc: $"Error al eliminar usuario: {ex.Message}",
                    tipoLog: "Error",
                    origen: "UserBase.DeleteRow"
                );
            }
        }

        protected async Task InsertRow()
        {
            //if (!gridUser?.IsValid != true) return;

            if (gridUser?.EditMode == DataGridEditMode.Single)
            {
                Reset();
            }

            var user = new ApplicationUser 
            { 
                OrgId = CurrentUser.OrgId,
                FechaRegistro = DateTime.Now,
                EsActivo = true,
                Estado = 5
            };
            
            usersToInsert.Add(user);
            if (gridUser != null)
            {
                await gridUser.InsertRow(user);
            }
        }

        protected async Task OnCreateRow(ApplicationUser user)
        {
            try
            {
                var result = await RepoUser.Insert(user, CurrentUser.OrgId, elUser: CurrentUser);
                if (!result.Exito)
                {
                    throw new Exception(result.Texto);
                }

                await RepoBitacora.AddBitacora(
                    userId: CurrentUser.Id,
                    desc: $"Se cre칩 el usuario {user.Nombre} {user.Paterno}",
                    orgId: CurrentUser.OrgId
                );

                usersToInsert.Remove(user);
            }
            catch (Exception ex)
            {
                await RepoBitacora.AddLog(
                    userId: CurrentUser.Id,
                    orgId: CurrentUser.OrgId,
                    desc: $"Error al crear usuario: {ex.Message}",
                    tipoLog: "Error",
                    origen: "UserBase.OnCreateRow"
                );
            }
        } 
        
        protected async Task OnUpdateRow(ApplicationUser user)
        {
            try
            {
                Reset(user);
                
                var result = await RepoUser.Update(user, CurrentUser.OrgId, elUser: CurrentUser);
                if (!result.Exito)
                {
                    throw new Exception(result.Texto);
                }

                await RepoBitacora.AddBitacora(
                    userId: CurrentUser.Id,
                    desc: $"Se actualiz칩 el usuario {user.Nombre} {user.Paterno}",
                    orgId: CurrentUser.OrgId
                );
            }
            catch (Exception ex)
            {
                await RepoBitacora.AddLog(
                    userId: CurrentUser.Id,
                    orgId: CurrentUser.OrgId,
                    desc: $"Error al actualizar usuario: {ex.Message}",
                    tipoLog: "Error",
                    origen: "UserBase.OnUpdateRow"
                );
            }
        }
}
