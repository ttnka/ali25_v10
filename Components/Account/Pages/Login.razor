@page "/Account/Login"

@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using Ali25_V10.Data

@inject SignInManager<ApplicationUser> SignInManager
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Log in</PageTitle>

<h1>Log in</h1>
<div class="row">
    <div class="col-md-4">
        <section>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">@errorMessage</div>
            }
            
            <EditForm Model="Input" method="post" OnValidSubmit="LoginUser" FormName="login">
                <DataAnnotationsValidator />
                <h2>Use a local account to log in.</h2>
                <hr />
                <ValidationSummary class="text-danger" role="alert" />
                <div class="form-floating mb-3">
                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                    <label for="email" class="form-label">Email</label>
                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                </div>
                <div class="form-floating mb-3">
                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                    <label for="password" class="form-label">Password</label>
                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                </div>
                <div class="checkbox mb-3">
                    <label class="form-label">
                        <InputCheckbox @bind-Value="Input.RememberMe" class="darker-border-checkbox form-check-input" />
                        Remember me
                    </label>
                </div>
                <div>
                    <button type="submit" class="w-100 btn btn-lg btn-primary">Log in</button>
                </div>
                <div>
                    <p>
                        <a href="Account/ForgotPassword">Forgot your password?</a>
                    </p>
                    <p>
                        <a href="@(NavigationManager.GetUriWithQueryParameters("Account/Register", new Dictionary<string, object?> { ["ReturnUrl"] = ReturnUrl }))">Register as a new user</a>
                    </p>
                    <p>
                        <a href="Account/ResendEmailConfirmation">Resend email confirmation</a>
                    </p>
                </div>
            </EditForm>

            @* Botón de diagnóstico siempre visible *@
            <div class="mt-3">
                <button class="btn btn-info" @onclick="DiagnosticoUsuario">Diagnosticar Usuario</button>
            </div>
            @if (!string.IsNullOrEmpty(diagnosticoMessage))
            {
                <div class="alert alert-info mt-3">
                    <pre>@diagnosticoMessage</pre>
                </div>
            }
        </section>
    </div>
    <div class="col-md-6 col-md-offset-2">
        <section>
            <h3>Use another service to log in.</h3>
            <hr />
            <ExternalLoginPicker />
        </section>
    </div>
</div>

@code {
    private string? errorMessage;
    private string? diagnosticoMessage;

    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    private async Task DiagnosticoUsuario()
    {
        try
        {
            if (string.IsNullOrEmpty(Input.Email))
            {
                diagnosticoMessage = "Por favor ingrese un email para diagnosticar";
                return;
            }

            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user != null)
            {
                var roles = await UserManager.GetRolesAsync(user);
                var lockoutEnd = user.LockoutEnd?.LocalDateTime.ToString() ?? "No bloqueado";
                var emailConfirmed = await UserManager.IsEmailConfirmedAsync(user);
                
                diagnosticoMessage = 
                    $"Diagnóstico de usuario {Input.Email}:\n" +
                    $"ID: {user.Id}\n" +
                    $"OrgId: {user.OrgId}\n" +
                    $"EsActivo: {user.EsActivo}\n" +
                    $"Estado: {user.Estado}\n" +
                    $"Email Confirmado: {emailConfirmed}\n" +
                    $"Bloqueo termina: {lockoutEnd}\n" +
                    $"Roles: {string.Join(", ", roles)}\n" +
                    $"Nombre Completo: {user.Nombre} {user.Paterno} {user.Materno}\n" +
                    $"Fecha Registro: {user.FechaRegistro}";

                Logger.LogInformation(diagnosticoMessage);
            }
            else
            {
                diagnosticoMessage = $"No se encontró usuario con email: {Input.Email}";
                Logger.LogWarning(diagnosticoMessage);
            }
        }
        catch (Exception ex)
        {
            diagnosticoMessage = $"Error al diagnosticar: {ex.Message}";
            Logger.LogError(ex, "Error en diagnóstico para {Email}", Input.Email);
        }
    }

    public async Task LoginUser(EditContext editContext)
    {
        errorMessage = null;
        diagnosticoMessage = null;

        try
        {
            Logger.LogInformation("Intento de login para usuario: {Email}", Input.Email);

            var user = await UserManager.FindByEmailAsync(Input.Email);
            if (user == null)
            {
                Logger.LogWarning("Usuario no encontrado: {Email}", Input.Email);
                errorMessage = "Usuario o contraseña incorrectos";
                return;
            }

            if (!await UserManager.IsEmailConfirmedAsync(user))
            {
                Logger.LogWarning("Intento de login sin email confirmado: {Email}", Input.Email);
                errorMessage = "Necesita confirmar su email antes de iniciar sesión. " +
                             "Por favor, revise su bandeja de entrada.";
                return;
            }

            if (!user.EsActivo)
            {
                Logger.LogWarning("Intento de login de usuario inactivo: {Email}", Input.Email);
                errorMessage = "Esta cuenta está desactivada";
                return;
            }

            var result = await SignInManager.PasswordSignInAsync(
                Input.Email, 
                Input.Password, 
                Input.RememberMe, 
                lockoutOnFailure: true);

            if (result.Succeeded)
            {
                Logger.LogInformation("Usuario logueado exitosamente: {Email}", Input.Email);
                RedirectManager.RedirectTo(ReturnUrl);
            }
            else
            {
                if (result.IsNotAllowed)
                {
                    errorMessage = "Su cuenta requiere activación. Por favor, confirme su email o contacte al administrador.";
                    Logger.LogWarning("Login no permitido para {Email}. Email confirmado: {EmailConfirmed}", 
                        Input.Email, 
                        await UserManager.IsEmailConfirmedAsync(user));
                }
                else if (result.IsLockedOut)
                {
                    errorMessage = "La cuenta está bloqueada. Intente más tarde.";
                }
                else if (result.RequiresTwoFactor)
                {
                    RedirectManager.RedirectTo(
                        "Account/LoginWith2fa",
                        new() { ["returnUrl"] = ReturnUrl, ["rememberMe"] = Input.RememberMe });
                }
                else
                {
                    errorMessage = "Usuario o contraseña incorrectos";
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error inesperado durante el login de {Email}", Input.Email);
            errorMessage = $"Error inesperado: {ex.Message}";
        }
    }
}
